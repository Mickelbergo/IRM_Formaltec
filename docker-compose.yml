version: '3.8'

services:
  # FastAPI Backend
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: wound-segmentation-api
    ports:
      - "8000:8000"
    environment:
      - MODEL_PATH=/models/best_model.pth
      - CONFIG_PATH=Code/configs/training_config.json
      - PREPROCESSING_CONFIG_PATH=Code/configs/preprocessing_config.json
      # PRIVACY CONFIGURATION (SECURE DEFAULTS)
      - LOCAL_LLM_ONLY=true                    # NO external API calls
      - LLM_TYPE=template                      # Template-based reports (no LLM)
      - LOCAL_LLM_PATH=                        # Leave empty for templates
      - OPENAI_API_KEY=                        # DO NOT set for sensitive data
      - ENABLE_TTA=true
      - DATABASE_URL=postgresql://admin:${DB_PASSWORD}@postgres:5432/wound_analysis
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - ./models:/models:ro
      - ./logs:/logs
      - ./Code:/app/Code:ro
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    networks:
      - wound-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: wound-segmentation-db
    environment:
      - POSTGRES_DB=wound_analysis
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=${DB_PASSWORD:-changeme}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - wound-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d wound_analysis"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: wound-segmentation-cache
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - wound-network
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Streamlit Dashboard
  dashboard:
    build:
      context: .
      dockerfile: Dockerfile
      target: application
    container_name: wound-segmentation-dashboard
    ports:
      - "8501:8501"
    environment:
      - API_URL=http://api:8000
    volumes:
      - ./training_logs:/app/training_logs:ro
      - ./Code:/app/Code:ro
    command: streamlit run Code/training/dashboard.py --server.port=8501 --server.address=0.0.0.0
    depends_on:
      - api
    restart: unless-stopped
    networks:
      - wound-network

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: wound-segmentation-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    restart: unless-stopped
    networks:
      - wound-network

  # Grafana Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: wound-segmentation-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - wound-network

  # Nginx Reverse Proxy (Optional - for production)
  nginx:
    image: nginx:alpine
    container_name: wound-segmentation-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - api
      - dashboard
    restart: unless-stopped
    networks:
      - wound-network
    profiles:
      - production

networks:
  wound-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
