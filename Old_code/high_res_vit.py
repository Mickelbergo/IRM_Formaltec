# -*- coding: utf-8 -*-
"""
Segmenter model
"""

import torch
import torch.nn as nn
from torch import Tensor
import torch.nn.functional as F
import math
import warnings
import os

import config
DEVICE = config.DEVICE

#%%
class FeedForward(nn.Module):
    def __init__(self, dim, hidden_dim, dropout, out_dim=None):
        super().__init__()
        self.fc1 = nn.Linear(dim, hidden_dim)
        self.act = nn.GELU()
        if out_dim is None:
            out_dim = dim
        self.fc2 = nn.Linear(hidden_dim, out_dim)
        self.drop = nn.Dropout(dropout)

    @property
    def unwrapped(self):
        return self

    def forward(self, x):
        x = self.fc1(x)
        x = self.act(x)
        x = self.drop(x)
        x = self.fc2(x)
        x = self.drop(x)
        return x


class Attention(nn.Module):
    def __init__(self, dim, heads, dropout):
        super().__init__()
        self.heads = heads
        head_dim = dim // heads
        self.scale = head_dim ** -0.5
        self.attn = None

        self.attn = nn.Linear(dim, dim * 3)
        self.attn_drop = nn.Dropout(dropout)
        self.proj = nn.Linear(dim, dim)
        self.proj_drop = nn.Dropout(dropout)

    @property
    def unwrapped(self):
        return self

    def forward(self, x, mask=None):
        B, N, C = x.shape
        qkv = (
            self.attn(x)
            .reshape(B, N, 3, self.heads, C // self.heads)
            .permute(2, 0, 3, 1, 4)
        )
        q, k, v = (
            qkv[0],
            qkv[1],
            qkv[2],
        )

        attn = (q @ k.transpose(-2, -1)) * self.scale
        attn = attn.softmax(dim=-1)
        attn = self.attn_drop(attn)

        x = (attn @ v).transpose(1, 2).reshape(B, N, C)
        x = self.proj(x)
        x = self.proj_drop(x)

        return x

def drop_path(x, drop_prob: float = 0., training: bool = False, scale_by_keep: bool = True):
    """Drop paths (Stochastic Depth) per sample (when applied in main path of residual blocks).
    This is the same as the DropConnect impl I created for EfficientNet, etc networks, however,
    the original name is misleading as 'Drop Connect' is a different form of dropout in a separate paper...
    See discussion: https://github.com/tensorflow/tpu/issues/494#issuecomment-532968956 ... I've opted for
    changing the layer and argument names to 'drop path' rather than mix DropConnect as a layer name and use
    'survival rate' as the argument.
    """
    if drop_prob == 0. or not training:
        return x
    keep_prob = 1 - drop_prob
    shape = (x.shape[0],) + (1,) * (x.ndim - 1)  # work with diff dim tensors, not just 2D ConvNets
    random_tensor = x.new_empty(shape).bernoulli_(keep_prob)
    if keep_prob > 0.0 and scale_by_keep:
        random_tensor.div_(keep_prob)
    return x * random_tensor


class DropPath(nn.Module): # könnte wohl vereinfacht/weggelassen werden
    """Drop paths (Stochastic Depth) per sample  (when applied in main path of residual blocks).
    """
    def __init__(self, drop_prob: float = 0., scale_by_keep: bool = True):
        super(DropPath, self).__init__()
        self.drop_prob = drop_prob
        self.scale_by_keep = scale_by_keep

    def forward(self, x):
        return drop_path(x, self.drop_prob, self.training, self.scale_by_keep)

    def extra_repr(self):
        return f'drop_prob={round(self.drop_prob,3):0.3f}'
    
    
    
class Block(nn.Module):
    def __init__(self, dim, heads, mlp_dim, dropout, drop_path):
        super().__init__()
        self.ln1 = nn.LayerNorm(dim)
        self.ln2 = nn.LayerNorm(dim)
        self.attn = Attention(dim, heads, dropout)
        self.ffn = FeedForward(dim, mlp_dim, dropout)
        self.drop_path = DropPath(drop_path) if drop_path > 0.0 else nn.Identity()

    def forward(self, x, mask=None):
        x = x + self.drop_path(self.attn(self.ln1(x), mask))
        x = x + self.drop_path(self.ffn(self.ln2(x)))
        return x

def _trunc_normal_(tensor, mean, std, a, b):
    # Cut & paste from PyTorch official master until it's in a few official releases - RW
    # Method based on https://people.sc.fsu.edu/~jburkardt/presentations/truncated_normal.pdf
    def norm_cdf(x):
        # Computes standard normal cumulative distribution function
        return (1. + math.erf(x / math.sqrt(2.))) / 2.

    if (mean < a - 2 * std) or (mean > b + 2 * std):
        warnings.warn("mean is more than 2 std from [a, b] in nn.init.trunc_normal_. "
                      "The distribution of values may be incorrect.",
                      stacklevel=2)

    # Values are generated by using a truncated uniform distribution and
    # then using the inverse CDF for the normal distribution.
    # Get upper and lower cdf values
    l = norm_cdf((a - mean) / std)
    u = norm_cdf((b - mean) / std)

    # Uniformly fill tensor with values from [l, u], then translate to
    # [2l-1, 2u-1].
    tensor.uniform_(2 * l - 1, 2 * u - 1)

    # Use inverse cdf transform for normal distribution to get truncated
    # standard normal
    tensor.erfinv_()

    # Transform to proper mean, std
    tensor.mul_(std * math.sqrt(2.))
    tensor.add_(mean)

    # Clamp to ensure it's in the proper range
    tensor.clamp_(min=a, max=b)
    return tensor

def init_weights(m):
    if isinstance(m, nn.Linear):
        trunc_normal_(m.weight, std=0.02)
        if isinstance(m, nn.Linear) and m.bias is not None:
            nn.init.constant_(m.bias, 0)
    elif isinstance(m, nn.LayerNorm):
        nn.init.constant_(m.bias, 0)
        nn.init.constant_(m.weight, 1.0)
        

def resize_pos_embed(posemb, grid_old_shape, grid_new_shape, num_extra_tokens):
    # Rescale the grid of position embeddings when loading from state_dict. Adapted from
    # https://github.com/google-research/vision_transformer/blob/00883dd691c63a6830751563748663526e811cee/vit_jax/checkpoint.py#L224
    posemb_tok, posemb_grid = (
        posemb[:, :num_extra_tokens],
        posemb[0, num_extra_tokens:],
    )
    if grid_old_shape is None:
        gs_old_h = int(math.sqrt(len(posemb_grid)))
        gs_old_w = gs_old_h
    else:
        gs_old_h, gs_old_w = grid_old_shape

    gs_h, gs_w = grid_new_shape
    posemb_grid = posemb_grid.reshape(1, gs_old_h, gs_old_w, -1).permute(0, 3, 1, 2)
    posemb_grid = F.interpolate(posemb_grid, size=(gs_h, gs_w), mode="bilinear")
    posemb_grid = posemb_grid.permute(0, 2, 3, 1).reshape(1, gs_h * gs_w, -1)
    posemb = torch.cat([posemb_tok, posemb_grid], dim=1)
    return posemb

        
def trunc_normal_(tensor, mean=0., std=1., a=-2., b=2.):
    # type: (Tensor, float, float, float, float) -> Tensor
    r"""Fills the input Tensor with values drawn from a truncated
    normal distribution. The values are effectively drawn from the
    normal distribution :math:`\mathcal{N}(\text{mean}, \text{std}^2)`
    with values outside :math:`[a, b]` redrawn until they are within
    the bounds. The method used for generating the random values works
    best when :math:`a \leq \text{mean} \leq b`.
    NOTE: this impl is similar to the PyTorch trunc_normal_, the bounds [a, b] are
    applied while sampling the normal with mean/std applied, therefore a, b args
    should be adjusted to match the range of mean, std args.
    Args:
        tensor: an n-dimensional `torch.Tensor`
        mean: the mean of the normal distribution
        std: the standard deviation of the normal distribution
        a: the minimum cutoff value
        b: the maximum cutoff value
    Examples:
        >>> w = torch.empty(3, 5)
        >>> nn.init.trunc_normal_(w)
    """
    with torch.no_grad():
        return _trunc_normal_(tensor, mean, std, a, b)
    
    
class PatchEmbedding(nn.Module):
    def __init__(self, image_size, patch_size, embed_dim, channels):
        super().__init__()

        self.image_size = image_size
        if image_size[0] % patch_size != 0 or image_size[1] % patch_size != 0:
            raise ValueError("image dimensions must be divisible by the patch size")
        self.grid_size = image_size[0] // patch_size, image_size[1] // patch_size
        self.num_patches = self.grid_size[0] * self.grid_size[1]
        self.patch_size = patch_size

        self.proj = nn.Conv2d(
            channels, embed_dim, kernel_size=patch_size, stride=patch_size
        ) # stride überlappend erlauben?

    def forward(self, im):
        x = self.proj(im).flatten(2).transpose(1, 2)
        return x
    
class VisionTransformer(nn.Module):
    def __init__(
        self,
        image_size,
        patch_size,
        n_layers,
        d_model,
        d_ff,
        n_heads,
        n_cls,
        dropout=0.1,
        drop_path_rate=0.0,
        distilled=False,
        channels=3,
    ):
        super().__init__()
        self.patch_embed = PatchEmbedding(
            image_size,
            patch_size,
            d_model,
            channels,
        )
        self.patch_size = patch_size
        self.n_layers = n_layers
        self.d_model = d_model # embed_dim
        self.d_ff = d_ff
        self.n_heads = n_heads
        self.dropout = nn.Dropout(dropout)
        self.n_cls = n_cls

        # cls and pos tokens
        self.cls_token = nn.Parameter(torch.zeros(1, 1, d_model))
        self.distilled = distilled # https://arxiv.org/abs/2012.12877v2
        if self.distilled:
            self.dist_token = nn.Parameter(torch.zeros(1, 1, d_model))
            self.pos_embed = nn.Parameter(
                torch.randn(1, self.patch_embed.num_patches + 2, d_model)
            )
            self.head_dist = nn.Linear(d_model, n_cls) 
        else:
            self.pos_embed = nn.Parameter(
                torch.randn(1, self.patch_embed.num_patches + 1, d_model)
            )

        # transformer blocks
        dpr = [x.item() for x in torch.linspace(0, drop_path_rate, n_layers)]
        self.blocks = nn.ModuleList(
            [Block(d_model, n_heads, d_ff, dropout, dpr[i]) for i in range(n_layers)]
        )

        # output head
        self.ln1 = nn.LayerNorm(d_model)
        self.head = nn.Linear(d_model, n_cls)

        trunc_normal_(self.pos_embed, std=0.02)
        trunc_normal_(self.cls_token, std=0.02)
        if self.distilled:
            trunc_normal_(self.dist_token, std=0.02)
        self.pre_logits = nn.Identity()

        self.apply(init_weights)

    @torch.jit.ignore
    def no_weight_decay(self):
        return {"pos_embed", "cls_token", "dist_token"}

    def forward(self, im, return_features=False):
        B, _, H, W = im.shape
        PS = self.patch_size

        x = self.patch_embed(im)
        cls_tokens = self.cls_token.expand(B, -1, -1)
        if self.distilled:
            dist_tokens = self.dist_token.expand(B, -1, -1)
            x = torch.cat((cls_tokens, dist_tokens, x), dim=1)
        else:
            x = torch.cat((cls_tokens, x), dim=1)

        pos_embed = self.pos_embed
        num_extra_tokens = 1 + self.distilled
        if x.shape[1] != pos_embed.shape[1]: # Wann wäre das der Fall??
            pos_embed = resize_pos_embed(
                pos_embed,
                self.patch_embed.grid_size,
                (H // PS, W // PS),
                num_extra_tokens,
            )
 
        x = x + pos_embed
        x = self.dropout(x)

        for blk in self.blocks:
            x = blk(x)
        x = self.ln1(x)

        if return_features:
            return x

        if self.distilled:
            x, x_dist = x[:, 0], x[:, 1]
            x = self.head(x)
            x_dist = self.head_dist(x_dist)
            x = (x + x_dist) / 2
        else:        
            x = x[:, 0]
            x = self.head(x)
            
        return x


class MaskTransformer(nn.Module):
    def __init__(
        self,
        n_cls,
        patch_size,
        d_encoder,
        n_layers,
        n_heads,
        d_model,
        d_ff,
        drop_path_rate,
        dropout,
    ):
        super().__init__()
        self.d_encoder = d_encoder
        self.patch_size = patch_size
        self.n_cls = n_cls
        self.d_model = d_model
        self.d_ff = d_ff
        self.scale = d_model ** -0.5 # wieso?????

        dpr = [x.item() for x in torch.linspace(0, drop_path_rate, n_layers)]
        self.blocks = nn.ModuleList(
            [Block(d_model, n_heads, d_ff, dropout, dpr[i]) for i in range(n_layers)]
        )

        self.cls_emb = nn.Parameter(torch.randn(1, self.n_cls, d_model))
        self.proj_dec = nn.Linear(d_encoder, d_model)

        self.proj_patch = nn.Parameter(self.scale * torch.randn(d_model, d_model))
        self.proj_classes = nn.Parameter(self.scale * torch.randn(d_model, d_model))

        self.decoder_norm = nn.LayerNorm(d_model)
        self.mask_norm = nn.LayerNorm(self.n_cls)

        self.apply(init_weights)
        trunc_normal_(self.cls_emb, std=0.02)

    @torch.jit.ignore
    def no_weight_decay(self):
        return {"cls_emb"}

    def forward(self, x, im_size):
        H, W = im_size
        GS = H // self.patch_size

        x = self.proj_dec(x)
        cls_emb = self.cls_emb.expand(x.size(0), -1, -1)
        x = torch.cat((x, cls_emb), 1)
        for blk in self.blocks:
            x = blk(x)
        x = self.decoder_norm(x)

        patches, cls_seg_feat = x[:, : -self.n_cls], x[:, -self.n_cls :]
        patches = patches @ self.proj_patch # @ in diesem Kontext??
        cls_seg_feat = cls_seg_feat @ self.proj_classes

        patches = patches / patches.norm(dim=-1, keepdim=True)
        cls_seg_feat = cls_seg_feat / cls_seg_feat.norm(dim=-1, keepdim=True)

        masks = patches @ cls_seg_feat.transpose(1, 2)
        masks = self.mask_norm(masks)
        [b, hw, n] = masks.size()

        masks = torch.reshape(masks, (b, int(GS), int(hw/GS), n))
        masks = masks.permute((0,3,1,2)) # , "b (h w) n -> b n h w", h=int(GS)

        return masks
    
def create_decoder(encoder, decoder_cfg):
    decoder_cfg = decoder_cfg.copy()
    name = decoder_cfg.pop("name")
    decoder_cfg["d_encoder"] = encoder.d_model
    decoder_cfg["patch_size"] = encoder.patch_size

    if name == "mask_transformer":
        dim = encoder.d_model
        n_heads = dim // 64
        decoder_cfg["n_heads"] = n_heads
        decoder_cfg["d_model"] = dim
        decoder_cfg["d_ff"] = 4 * dim
        decoder = MaskTransformer(**decoder_cfg)
    else:
        raise ValueError(f"Unknown decoder: {name}")
    return decoder

def create_decoder2(encoder, decoder_cfg):
    decoder_cfg = decoder_cfg.copy()
    name = decoder_cfg.pop("name")
    decoder_cfg["d_encoder"] = encoder.d_model
    decoder_cfg["patch_size"] = encoder.patch_size

    if name == "mask_transformer":
        dim = encoder.d_model
        n_heads = dim // 64
        decoder_cfg["n_heads"] = n_heads
        decoder_cfg["d_model"] = dim
        decoder_cfg["d_ff"] = 4 * dim
        decoder = MaskTransformer2(**decoder_cfg)
    else:
        raise ValueError(f"Unknown decoder: {name}")
    return decoder

def padding(im, patch_size, fill_value=0):
    # make the image sizes divisible by patch_size
    H, W = im.size(2), im.size(3)
    pad_h, pad_w = 0, 0
    if H % patch_size > 0:
        pad_h = patch_size - (H % patch_size)
    if W % patch_size > 0:
        pad_w = patch_size - (W % patch_size)
    im_padded = im
    if pad_h > 0 or pad_w > 0:
        im_padded = F.pad(im, (0, pad_w, 0, pad_h), value=fill_value)
    return im_padded


def unpadding(y, target_size):
    H, W = target_size
    H_pad, W_pad = y.size(2), y.size(3)
    # crop predictions on extra pixels coming from padding
    extra_h = H_pad - H
    extra_w = W_pad - W
    if extra_h > 0:
        y = y[:, :, :-extra_h]
    if extra_w > 0:
        y = y[:, :, :, :-extra_w]
    return y

# unterschiedliche Auflösung noch unberücksichtigt------------------------------------------
def reassemble(masks_patches, masks, indices_ld, indices_md, indices_hd):
    b, c, h, w = masks.size()
    masks = masks.flatten(start_dim=2) #b, c, (h*w)
    masks_patches = masks_patches.flatten(start_dim=2) #b, c, (h*w)
    
    # Überall 0, wo der patch nicht vorkommt. 1 wo der gewünschte Patch sich im Bild befindet
    indices_ld = torch.sum(F.one_hot(indices_ld, num_classes=h*w), dim=1) # b* (h*w)
    indices_ld = indices_ld.unsqueeze(1) # b, 1, (h*w)
    
    indices_md = torch.tile(F.one_hot(indices_md, num_classes=h*w).unsqueeze(1), (1,c,1,1)) # b * c * (h*w/2)* (h*w)
    indices_hd = torch.tile(F.one_hot(indices_hd, num_classes=h*w).unsqueeze(1), (1,c,1,1)) # b * c * (h*w/32)* (h*w)
    
    masks_md = masks[:, :, :int(h*w/2)]

    indices_md = torch.sum(indices_md * masks_md.unsqueeze(3), dim=2) # b * c * (h*w)
    indices_hd = torch.sum(indices_hd, dim=2) # b * c * (h*w); all 1,0

    pred = masks_patches*indices_ld + indices_md # b*c*(h*w)
    pred = pred.view(b,c,h,w)
    indices_hd = indices_hd.view(b,c,h,w).float()
    # interpolate to the same resolution as the hd patches
    pred = F.interpolate(pred, size=(h*4, w*4), mode="nearest")
    indices_hd = F.interpolate(indices_hd, size=(h*4, w*4), mode="nearest") # b*c*(16*h*w)
    
    indices_hd = indices_hd.flatten() # (b*c*16*h*w)

    indices_hd = torch.nonzero(indices_hd, as_tuple=True)[0] # (b*c*16*h*w/32)

    masks_hd = masks[:, :, int(h*w/2):].flatten() #(b*c*h*w/2)
    
    pred = pred.flatten() # (b*c*16*h*w)
    pred = pred.index_add_(dim=0, index=indices_hd, source=masks_hd).view(b,c,4*h, 4*w)

    return pred


class Segmenter(nn.Module):
    def __init__(
        self,
        encoder,
        decoder,
        encoder2,
        decoder2,
        n_cls,
    ):
        super().__init__()
        self.n_cls = n_cls
        self.patch_size = encoder.patch_size
        self.encoder = encoder
        self.decoder = decoder
        self.encoder2 = encoder2
        self.decoder2 = decoder2
        self.softmax = nn.Softmax(dim = 1)  
        self.reassemble = reassemble

    @torch.jit.ignore
    def no_weight_decay(self):
        def append_prefix_no_weight_decay(prefix, module):
            return set(map(lambda x: prefix + x, module.no_weight_decay()))

        nwd_params = append_prefix_no_weight_decay("encoder.", self.encoder).union(
            append_prefix_no_weight_decay("decoder.", self.decoder)
        )
        return nwd_params

    def forward(self, im, im_large):
        # H_ori, W_ori = im.size(2), im.size(3)
        # im = padding(im, self.patch_size)
        H, W = im.size(2), im.size(3)

        x = self.encoder(im, return_features=True)

        # remove CLS/DIST tokens for decoding
        num_extra_tokens = 1 + self.encoder.distilled
        x = x[:, num_extra_tokens:]

        masks = self.decoder(x, (H, W))
        masks1 = self.softmax(masks)
        b, c, h, w = masks.size()
        n_p = int(h*w/32)

        masks = torch.sum(masks1[:, 1:], dim=1) # add all non-background channels 
        masks = masks.flatten(start_dim=1) # [b, (h*w)]

        values_md, patches_md = torch.topk(masks, int(h*w/2 + n_p), dim=1)
        values_hd, patches_hd = torch.topk(masks, n_p, dim=1)
        values_ld, patches_ld = torch.topk(masks, int(h*w), dim=1)
        
        # sort by location, mask indices are divided into ld, md and hd indices
        indices_md, _ = torch.sort(patches_md[:, n_p:], dim=1)
        indices_hd, _ = torch.sort(patches_hd, dim=1)
        indices_ld, _ = torch.sort(patches_ld[:, int(h*w/2 + n_p):], dim=1)

        x = self.encoder2(im, im_large, indices_md, indices_hd)
        
        num_extra_tokens = 1
        x = x[:, num_extra_tokens:]
        
        masks = self.decoder2(x, (H, W))
        masks = self.softmax(masks)
        
        masks = self.reassemble(masks1, masks, indices_ld, indices_md, indices_hd)
        
        masks = F.interpolate(masks, size=(H, W), mode="bilinear")
        # masks = unpadding(masks, (H_ori, W_ori))
        masks = self.softmax(masks)

        return masks

    def get_attention_map_enc(self, im, layer_id):
        return self.encoder.get_attention_map(im, layer_id)

    def get_attention_map_dec(self, im, layer_id):
        x = self.encoder(im, return_features=True)

        # remove CLS/DIST tokens for decoding
        num_extra_tokens = 1 + self.encoder.distilled
        x = x[:, num_extra_tokens:]

        return self.decoder.get_attention_map(x, layer_id)

#%%
class SparsePatchEmbedding(nn.Module):
    def __init__(self, image_size, patch_size, embed_dim, channels):
        super().__init__()

        self.image_size = image_size
        if image_size[0] % patch_size != 0 or image_size[1] % patch_size != 0:
            raise ValueError("image dimensions must be divisible by the patch size")
        self.grid_size = image_size[0] // patch_size, image_size[1] // patch_size
        self.num_patches = self.grid_size[0] * self.grid_size[1]
        self.patch_size = patch_size
        self.patch_size_large = patch_size*4

        self.proj = nn.Conv2d(
            channels, embed_dim, kernel_size=patch_size, stride=patch_size
        ) # stride überlappend erlauben?

    def forward(self, im, im_large, indices_md, indices_hd):
        
        B, _, H, W = im.shape  
        
        add_md = torch.hstack([torch.full([int(self.num_patches/2)], i*self.num_patches) for i in range(B)]).to(DEVICE)
        add_hd = torch.hstack([torch.full([int(self.num_patches/32)], i*self.num_patches) for i in range(B)]).to(DEVICE)
        
        indices_md = indices_md.flatten() + add_md
        indices_hd = indices_hd.flatten() + add_hd
        
        kc, kh, kw = 3, self.patch_size, self.patch_size  # kernel size
        dc, dh, dw = 3, self.patch_size, self.patch_size  # stride
        # Pad to multiples of 16 -> probably not necessary
        # x = F.pad(x, (x.size(2)%kw // 2, x.size(2)%kw // 2,
        #               x.size(1)%kh // 2, x.size(1)%kh // 2,
        #               x.size(0)%kc // 2, x.size(0)%kc // 2))
        
        patches = im.unfold(1, kc, dc).unfold(2, kh, dh).unfold(3, kw, dw)
        unfold_shape = patches.size()
        patches = patches.contiguous().view(-1, kc, kh, kw)
        
        selected_patches = torch.index_select(patches, 0, indices_md)
        
        selected_patches = selected_patches.view(B, int(self.num_patches/2), kc, kh, kw)

        kc, kh, kw = 3, self.patch_size_large, self.patch_size_large  # kernel size
        dc, dh, dw = 3, self.patch_size_large, self.patch_size_large  # stride

        
        large_patches = im_large.unfold(1, kc, dc).unfold(2, kh, dh).unfold(3, kw, dw)
        large_patches = large_patches.contiguous().view(-1, kc, kh, kw)
        selected_patches_large = torch.index_select(large_patches, 0, indices_hd)
        
        kc, kh, kw = 3, self.patch_size, self.patch_size  # kernel size
        dc, dh, dw = 3, self.patch_size, self.patch_size  # stride
        
        hd_patches = selected_patches_large.unfold(1, kc, dc).unfold(2, kh, dh).unfold(3, kw, dw)
        hd_patches = hd_patches.contiguous().view(B, int(self.num_patches/2), kc, kh, kw)
        
        all_patches = torch.cat((selected_patches, hd_patches), dim=1)
        
        # Reshape back
        patches_orig = all_patches.view(unfold_shape)
        output_c = unfold_shape[1] * unfold_shape[4]
        output_h = unfold_shape[2] * unfold_shape[5]
        output_w = unfold_shape[3] * unfold_shape[6]
        patches_orig = patches_orig.permute(0, 1, 4, 2, 5, 3, 6).contiguous()
        patches_orig = patches_orig.view(B, output_c, output_h, output_w)

        x = self.proj(patches_orig).flatten(2).transpose(1, 2)
        return x
    
    
#%%
class VisionTransformer2(nn.Module):
    def __init__(
        self,

        image_size,
        patch_size,
        n_layers,
        d_model,
        d_ff,
        n_heads,
        n_cls,
        dropout=0.1,
        drop_path_rate=0.0,
        distilled=False,
        channels=3,
    ):
        super().__init__()
        self.patch_embed = SparsePatchEmbedding(
            image_size,
            patch_size,
            d_model,
            channels,
        )

        self.patch_size = patch_size
        self.n_layers = n_layers * 2 # grundsätzlich im zweiten Pass mehr Layers?
        self.d_model = d_model # embed_dim
        self.d_ff = d_ff
        self.n_heads = n_heads
        self.dropout = nn.Dropout(dropout)
        self.n_cls = n_cls

        # cls and pos tokens
        self.cls_token = nn.Parameter(torch.zeros(1, 1, d_model))

        self.pos_embed = nn.Parameter(
                torch.randn(self.patch_embed.num_patches + 1, d_model)
            )
        self.rel_embed = nn.Parameter(
                torch.randn(16, d_model)
            )


        # transformer blocks
        dpr = [x.item() for x in torch.linspace(0, drop_path_rate, n_layers)]
        self.blocks = nn.ModuleList(
            [Block(d_model, n_heads, d_ff, dropout, dpr[i]) for i in range(n_layers)]
        )

        # output head
        self.ln1 = nn.LayerNorm(d_model)

        trunc_normal_(self.pos_embed, std=0.02)
        trunc_normal_(self.cls_token, std=0.02)

        self.pre_logits = nn.Identity()

        self.apply(init_weights)

    @torch.jit.ignore
    def no_weight_decay(self):
        return {"pos_embed", "cls_token", "dist_token"}

    def forward(self, im, im_large, indices_md, indices_hd):

        B, _, H, W = im.shape        
        x = self.patch_embed(im, im_large, indices_md, indices_hd)
        
        indices_md = indices_md.flatten()
        indices_hd = indices_hd.flatten() 
        
        # each high resolution patch gets the same positional encoding added to all sub-patches
        hd = torch.hstack([torch.full([16], indices_hd[i]) for i in range(len(indices_hd))]).to(DEVICE)
        # Additionally a relative positional patch for the 16 patches inside
        # the larger high resolution patch is added
        rel = torch.hstack([torch.arange(16) for i in range(len(indices_hd))]).to(DEVICE)
        
        
        encoding_md = torch.index_select(self.pos_embed, 0, indices_md).view(B, \
                                        int(self.patch_embed.num_patches/2), self.d_model)
        encoding_hd = torch.index_select(self.pos_embed, 0, hd).view(B, \
                                        int(self.patch_embed.num_patches/2), self.d_model)
        encoding_rel = torch.index_select(self.rel_embed, 0, rel).view(B, \
                                        int(self.patch_embed.num_patches/2), self.d_model)
        
        # The class token also gets a positional encoding
        encoding_cls = torch.tile(self.pos_embed[self.patch_embed.num_patches].unsqueeze(0),
                                  (B,1)).unsqueeze(1)
        
        encoding = torch.cat((encoding_cls, 
                              encoding_md, encoding_hd + encoding_rel), dim=1) 
        
        cls_tokens = self.cls_token.expand(B, -1, -1)

        x = torch.cat((cls_tokens, x), dim=1)

        x = x + encoding
        x = self.dropout(x)

        for blk in self.blocks:
            x = blk(x)
            
        x = self.ln1(x)
        
        return x
#%%

class MaskTransformer2(nn.Module):
    def __init__(
        self,
        n_cls,
        patch_size,
        d_encoder,
        n_layers,
        n_heads,
        d_model,
        d_ff,
        drop_path_rate,
        dropout,
    ):
        super().__init__()
        self.d_encoder = d_encoder
        self.patch_size = patch_size
        self.n_cls = n_cls
        self.d_model = d_model
        self.d_ff = d_ff
        self.scale = d_model ** -0.5 # wieso?????

        dpr = [x.item() for x in torch.linspace(0, drop_path_rate, n_layers)]
        self.blocks = nn.ModuleList(
            [Block(d_model, n_heads, d_ff, dropout, dpr[i]) for i in range(n_layers)]
        )

        self.cls_emb = nn.Parameter(torch.randn(1, self.n_cls, d_model))
        self.proj_dec = nn.Linear(d_encoder, d_model)

        self.proj_patch = nn.Parameter(self.scale * torch.randn(d_model, d_model))
        self.proj_classes = nn.Parameter(self.scale * torch.randn(d_model, d_model))

        self.decoder_norm = nn.LayerNorm(d_model)
        self.mask_norm = nn.LayerNorm(self.n_cls)

        self.apply(init_weights)
        trunc_normal_(self.cls_emb, std=0.02)

    @torch.jit.ignore
    def no_weight_decay(self):
        return {"cls_emb"}

    def forward(self, x, im_size):
        H, W = im_size
        GS = H // self.patch_size

        x = self.proj_dec(x)
        cls_emb = self.cls_emb.expand(x.size(0), -1, -1)
        x = torch.cat((x, cls_emb), 1)
        for blk in self.blocks:
            x = blk(x)
        x = self.decoder_norm(x)

        patches, cls_seg_feat = x[:, : -self.n_cls], x[:, -self.n_cls :]
        patches = patches @ self.proj_patch # @ in diesem Kontext??
        cls_seg_feat = cls_seg_feat @ self.proj_classes

        patches = patches / patches.norm(dim=-1, keepdim=True)
        cls_seg_feat = cls_seg_feat / cls_seg_feat.norm(dim=-1, keepdim=True)

        masks = patches @ cls_seg_feat.transpose(1, 2)
        masks = self.mask_norm(masks)
        [b, hw, n] = masks.size()

        masks = torch.reshape(masks, (b, int(GS), int(hw/GS), n))
        masks = masks.permute((0,3,1,2)) # , "b (h w) n -> b n h w", h=int(GS)

        return masks
    
#%%

# Configurations for Segmenter model https://github.com/rstrudel/segmenter
model_cfg = {
    "image_size": (512, 512), "patch_size": 16, "d_model": 192, "n_heads": 3, 
    "n_layers": 6, "distilled": False, "d_ff": 4*192, # d_model > 64
    "n_cls": 11, # number of classes + 1
}

decoder_cfg = {
    "name": "mask_transformer",
    "n_layers": 2, 
    "drop_path_rate": 0.0,
    "dropout": 0.1,
    "n_cls": 11
}

encoder = VisionTransformer(**model_cfg)
decoder = create_decoder(encoder, decoder_cfg)
encoder2 = VisionTransformer2(**model_cfg)
decoder2 = create_decoder2(encoder, decoder_cfg)
hd_vit_model = Segmenter(encoder, decoder, encoder2, decoder2, n_cls=model_cfg["n_cls"])

x = torch.rand((8, 3, 512, 512))
x_large = torch.rand((8, 3, 4*512, 4*512))
# out = vit_model.forward(x, x_large)
# print(out.size())

# print(vit_model)
# print(vit_model.state_dict())
# state_dict = torch.load(os.path.join(config.path, "Models/segmenter_vit-t_mask_8x1_512x512_160k_ade20k_20220105_151706-ffcf7509.pth"))["state_dict"]
# new_state_dict = {}
# for key, value in state_dict.items():
#     new_key = key.replace("backbone", "encoder")
#     new_key = new_key.replace("attn.in_proj_weight", "attn.weight")
#     new_key = new_key.replace("attn.in_proj_bias", "attn.bias")
#     new_key = new_key.replace("attn.out_proj.weight", "proj.weight")
#     new_key = new_key.replace("attn.out_proj.bias", "proj.bias")
#     new_key = new_key.replace("ffn.layers.0.0", "mlp.fc1")
#     new_key = new_key.replace("ffn.layers.1", "mlp.fc2")
    
#     new_state_dict[new_key] = value

# vit_model.load_state_dict(new_state_dict, strict=False)
